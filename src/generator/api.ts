/* tslint:disable */
/* eslint-disable */
/**
 * API site Admin for Hermetic Remote
 * API site Admin for hermetic_remote
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base"

/**
 *
 * @export
 * @interface Administrator
 */
export interface Administrator {
  /**
   * request success
   * @type {number}
   * @memberof Administrator
   */
  success: number
  /**
   *
   * @type {AdministratorData}
   * @memberof Administrator
   */
  data: AdministratorData
  /**
   *
   * @type {string}
   * @memberof Administrator
   */
  errors: string | null
}
/**
 *
 * @export
 * @interface AdministratorData
 */
export interface AdministratorData {
  /**
   *
   * @type {Array<AdministratorDataAdminsInner>}
   * @memberof AdministratorData
   */
  admins: Array<AdministratorDataAdminsInner>
  /**
   *
   * @type {Pagination}
   * @memberof AdministratorData
   */
  pagination: Pagination
}
/**
 *
 * @export
 * @interface AdministratorDataAdminsInner
 */
export interface AdministratorDataAdminsInner {
  /**
   * Name
   * @type {string}
   * @memberof AdministratorDataAdminsInner
   */
  name?: string
  /**
   * Admin Code
   * @type {string}
   * @memberof AdministratorDataAdminsInner
   */
  admin_code?: string
  /**
   * status public of account
   * @type {number}
   * @memberof AdministratorDataAdminsInner
   */
  is_public?: number
}
/**
 *
 * @export
 * @interface Auth
 */
export interface Auth {
  /**
   * access token
   * @type {string}
   * @memberof Auth
   */
  access_token?: string
  /**
   * type of token
   * @type {string}
   * @memberof Auth
   */
  token_type?: string
  /**
   * expires
   * @type {number}
   * @memberof Auth
   */
  expires_in?: number
  /**
   *
   * @type {Profile}
   * @memberof Auth
   */
  admin?: Profile
}
/**
 *
 * @export
 * @interface DestroyAdmin200Response
 */
export interface DestroyAdmin200Response {
  /**
   * Delete admins successfully
   * @type {number}
   * @memberof DestroyAdmin200Response
   */
  success: number
  /**
   *
   * @type {string}
   * @memberof DestroyAdmin200Response
   */
  data: string
  /**
   *
   * @type {string}
   * @memberof DestroyAdmin200Response
   */
  errors: string | null
}
/**
 *
 * @export
 * @interface DestroyAdmin400Response
 */
export interface DestroyAdmin400Response {
  /**
   * Delete admins failed
   * @type {number}
   * @memberof DestroyAdmin400Response
   */
  success: number
  /**
   *
   * @type {object}
   * @memberof DestroyAdmin400Response
   */
  data: object
  /**
   *
   * @type {DestroyAdmin400ResponseErrors}
   * @memberof DestroyAdmin400Response
   */
  errors: DestroyAdmin400ResponseErrors
}
/**
 *
 * @export
 * @interface DestroyAdmin400ResponseErrors
 */
export interface DestroyAdmin400ResponseErrors {
  /**
   * Delete admins failed
   * @type {string}
   * @memberof DestroyAdmin400ResponseErrors
   */
  error_code?: string
  /**
   * Delete admins failed
   * @type {string}
   * @memberof DestroyAdmin400ResponseErrors
   */
  error_message?: string
}
/**
 *
 * @export
 * @interface DestroyAdminRequest
 */
export interface DestroyAdminRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof DestroyAdminRequest
   */
  admin_codes: Array<string>
}
/**
 *
 * @export
 * @interface DestroyUser200Response
 */
export interface DestroyUser200Response {
  /**
   * Delete user successfully
   * @type {number}
   * @memberof DestroyUser200Response
   */
  success: number
  /**
   *
   * @type {string}
   * @memberof DestroyUser200Response
   */
  data?: string
  /**
   *
   * @type {string}
   * @memberof DestroyUser200Response
   */
  errors?: string | null
}
/**
 *
 * @export
 * @interface Index
 */
export interface Index {
  /**
   * Log id
   * @type {number}
   * @memberof Index
   */
  id?: number
  /**
   * Name
   * @type {string}
   * @memberof Index
   */
  name?: string
  /**
   * Log in time
   * @type {string}
   * @memberof Index
   */
  login_time?: string
  /**
   * Log out time
   * @type {string}
   * @memberof Index
   */
  logout_time?: string
}
/**
 *
 * @export
 * @interface Index1
 */
export interface Index1 {
  /**
   * Name
   * @type {string}
   * @memberof Index1
   */
  name?: string
  /**
   * User code
   * @type {string}
   * @memberof Index1
   */
  user_code?: string
  /**
   * Company name
   * @type {string}
   * @memberof Index1
   */
  company_name?: string
  /**
   * Manager name
   * @type {string}
   * @memberof Index1
   */
  manager_name?: string
  /**
   * Number of registered machine
   * @type {number}
   * @memberof Index1
   */
  total_device_register?: number
  /**
   * Status stop of user
   * @type {number}
   * @memberof Index1
   */
  is_stop?: number
  /**
   * Open date
   * @type {string}
   * @memberof Index1
   */
  open_date?: string
  /**
   * Stop date
   * @type {string}
   * @memberof Index1
   */
  stop_date?: string
  /**
   * Created time
   * @type {string}
   * @memberof Index1
   */
  created_at?: string
  /**
   * Updated time
   * @type {string}
   * @memberof Index1
   */
  updated_at?: string
  /**
   * Deleted time
   * @type {string}
   * @memberof Index1
   */
  deleted_at?: string
}
/**
 * @type IndexAdmin200Response
 * @export
 */
export type IndexAdmin200Response = Administrator | SubAdministrator

/**
 *
 * @export
 * @interface IndexLogAdmin200Response
 */
export interface IndexLogAdmin200Response {
  /**
   * Get admin logs successfully
   * @type {number}
   * @memberof IndexLogAdmin200Response
   */
  success: number
  /**
   *
   * @type {IndexLogAdmin200ResponseData}
   * @memberof IndexLogAdmin200Response
   */
  data: IndexLogAdmin200ResponseData
  /**
   *
   * @type {string}
   * @memberof IndexLogAdmin200Response
   */
  errors: string | null
}
/**
 *
 * @export
 * @interface IndexLogAdmin200ResponseData
 */
export interface IndexLogAdmin200ResponseData {
  /**
   *
   * @type {Array<Index>}
   * @memberof IndexLogAdmin200ResponseData
   */
  logs: Array<Index>
  /**
   *
   * @type {Pagination}
   * @memberof IndexLogAdmin200ResponseData
   */
  pagination: Pagination
}
/**
 *
 * @export
 * @interface IndexUser200Response
 */
export interface IndexUser200Response {
  /**
   * Request success
   * @type {number}
   * @memberof IndexUser200Response
   */
  success: number
  /**
   *
   * @type {IndexUser200ResponseData}
   * @memberof IndexUser200Response
   */
  data: IndexUser200ResponseData
  /**
   *
   * @type {string}
   * @memberof IndexUser200Response
   */
  errors: string | null
}
/**
 *
 * @export
 * @interface IndexUser200ResponseData
 */
export interface IndexUser200ResponseData {
  /**
   *
   * @type {IndexUser200ResponseDataUsers}
   * @memberof IndexUser200ResponseData
   */
  users: IndexUser200ResponseDataUsers
  /**
   *
   * @type {Pagination}
   * @memberof IndexUser200ResponseData
   */
  pagination: Pagination
}
/**
 * @type IndexUser200ResponseDataUsers
 * @export
 */
export type IndexUser200ResponseDataUsers = Array<Index1> | Array<ListDeletedUser>

/**
 *
 * @export
 * @interface ListDeletedUser
 */
export interface ListDeletedUser {
  /**
   * Name
   * @type {string}
   * @memberof ListDeletedUser
   */
  name?: string
  /**
   * User code
   * @type {string}
   * @memberof ListDeletedUser
   */
  user_code?: string
  /**
   * Company name
   * @type {string}
   * @memberof ListDeletedUser
   */
  company_name?: string
  /**
   * Manager name
   * @type {string}
   * @memberof ListDeletedUser
   */
  manager_name?: string
  /**
   * Created time
   * @type {string}
   * @memberof ListDeletedUser
   */
  created_at?: string
  /**
   * Updated time
   * @type {string}
   * @memberof ListDeletedUser
   */
  updated_at?: string
  /**
   * Deleted time
   * @type {string}
   * @memberof ListDeletedUser
   */
  deleted_at?: string
}
/**
 *
 * @export
 * @interface Login
 */
export interface Login {
  /**
   * Admin Code
   * @type {string}
   * @memberof Login
   */
  admin_code: string
  /**
   * Admin Password
   * @type {string}
   * @memberof Login
   */
  password: string
}
/**
 *
 * @export
 * @interface Login200Response
 */
export interface Login200Response {
  /**
   * request success
   * @type {number}
   * @memberof Login200Response
   */
  success: number
  /**
   *
   * @type {Auth}
   * @memberof Login200Response
   */
  data: Auth
  /**
   *
   * @type {object}
   * @memberof Login200Response
   */
  errors: object
}
/**
 *
 * @export
 * @interface Login422Response
 */
export interface Login422Response {
  /**
   * Failed request
   * @type {number}
   * @memberof Login422Response
   */
  success: number
  /**
   *
   * @type {object}
   * @memberof Login422Response
   */
  data: object
  /**
   *
   * @type {Login422ResponseErrors}
   * @memberof Login422Response
   */
  errors: Login422ResponseErrors
}
/**
 *
 * @export
 * @interface Login422ResponseErrors
 */
export interface Login422ResponseErrors {
  /**
   * Login Failed
   * @type {string}
   * @memberof Login422ResponseErrors
   */
  error_code?: string
  /**
   * error message
   * @type {string}
   * @memberof Login422ResponseErrors
   */
  error_message?: string
}
/**
 *
 * @export
 * @interface Login500Response
 */
export interface Login500Response {
  /**
   * Request failed
   * @type {number}
   * @memberof Login500Response
   */
  success: number
  /**
   *
   * @type {object}
   * @memberof Login500Response
   */
  data: object
  /**
   *
   * @type {Login500ResponseErrors}
   * @memberof Login500Response
   */
  errors: Login500ResponseErrors
}
/**
 *
 * @export
 * @interface Login500ResponseErrors
 */
export interface Login500ResponseErrors {
  /**
   * Internal Server Error response status code
   * @type {string}
   * @memberof Login500ResponseErrors
   */
  error_code?: string
  /**
   * Internal Server Error
   * @type {string}
   * @memberof Login500ResponseErrors
   */
  error_message?: string
}
/**
 *
 * @export
 * @interface Logout200Response
 */
export interface Logout200Response {
  /**
   * request success
   * @type {number}
   * @memberof Logout200Response
   */
  success: number
  /**
   *
   * @type {object}
   * @memberof Logout200Response
   */
  data: object
  /**
   *
   * @type {object}
   * @memberof Logout200Response
   */
  errors: object
}
/**
 *
 * @export
 * @interface Me
 */
export interface Me {
  /**
   * Department
   * @type {string}
   * @memberof Me
   */
  department: string
}
/**
 *
 * @export
 * @interface Me200Response
 */
export interface Me200Response {
  /**
   * Get my profile successfully
   * @type {number}
   * @memberof Me200Response
   */
  success: number
  /**
   *
   * @type {Profile}
   * @memberof Me200Response
   */
  data: Profile
  /**
   *
   * @type {string}
   * @memberof Me200Response
   */
  errors: string | null
}
/**
 *
 * @export
 * @interface Me401Response
 */
export interface Me401Response {
  /**
   * Failed request
   * @type {number}
   * @memberof Me401Response
   */
  success: number
  /**
   *
   * @type {object}
   * @memberof Me401Response
   */
  data: object
  /**
   *
   * @type {Me401ResponseErrors}
   * @memberof Me401Response
   */
  errors: Me401ResponseErrors
}
/**
 *
 * @export
 * @interface Me401ResponseErrors
 */
export interface Me401ResponseErrors {
  /**
   * Unauthorized response status code
   * @type {string}
   * @memberof Me401ResponseErrors
   */
  error_code?: string
  /**
   * error message
   * @type {string}
   * @memberof Me401ResponseErrors
   */
  error_message?: string
}
/**
 *
 * @export
 * @interface Pagination
 */
export interface Pagination {
  /**
   * Current page
   * @type {number}
   * @memberof Pagination
   */
  current_page: number
  /**
   * From record
   * @type {number}
   * @memberof Pagination
   */
  from: number
  /**
   * To record
   * @type {number}
   * @memberof Pagination
   */
  to: number
  /**
   * Last page
   * @type {number}
   * @memberof Pagination
   */
  last_page: number
  /**
   * Number records of per page
   * @type {number}
   * @memberof Pagination
   */
  per_page: number
  /**
   * Total record
   * @type {number}
   * @memberof Pagination
   */
  total: number
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
  /**
   * Admin code
   * @type {string}
   * @memberof Profile
   */
  admin_code?: string
  /**
   * Name
   * @type {string}
   * @memberof Profile
   */
  name?: string
  /**
   * Department
   * @type {string}
   * @memberof Profile
   */
  department?: string
  /**
   * Role id
   * @type {number}
   * @memberof Profile
   */
  role_id?: number
  /**
   * Role name
   * @type {string}
   * @memberof Profile
   */
  role_name?: string
}
/**
 *
 * @export
 * @interface Register
 */
export interface Register {
  /**
   * Name
   * @type {string}
   * @memberof Register
   */
  name: string
  /**
   * Department
   * @type {string}
   * @memberof Register
   */
  department?: string
  /**
   * Admin Code
   * @type {string}
   * @memberof Register
   */
  admin_code: string
  /**
   * Admin Password
   * @type {string}
   * @memberof Register
   */
  password: string
}
/**
 *
 * @export
 * @interface Register1
 */
export interface Register1 {
  /**
   * Name
   * @type {string}
   * @memberof Register1
   */
  name?: string
  /**
   * Department
   * @type {string}
   * @memberof Register1
   */
  department?: string
  /**
   * Admin Code
   * @type {string}
   * @memberof Register1
   */
  admin_code?: string
  /**
   * Role id
   * @type {number}
   * @memberof Register1
   */
  role_id?: number
  /**
   * Role name
   * @type {string}
   * @memberof Register1
   */
  role_name?: string
}
/**
 *
 * @export
 * @interface Register200Response
 */
export interface Register200Response {
  /**
   * request success
   * @type {number}
   * @memberof Register200Response
   */
  success: number
  /**
   *
   * @type {Register1}
   * @memberof Register200Response
   */
  data: Register1
  /**
   *
   * @type {object}
   * @memberof Register200Response
   */
  errors: object
}
/**
 *
 * @export
 * @interface Register422Response
 */
export interface Register422Response {
  /**
   * Failed request
   * @type {number}
   * @memberof Register422Response
   */
  success: number
  /**
   *
   * @type {object}
   * @memberof Register422Response
   */
  data: object
  /**
   *
   * @type {Register422ResponseErrors}
   * @memberof Register422Response
   */
  errors: Register422ResponseErrors
}
/**
 *
 * @export
 * @interface Register422ResponseErrors
 */
export interface Register422ResponseErrors {
  /**
   * Register Failed
   * @type {string}
   * @memberof Register422ResponseErrors
   */
  error_code?: string
  /**
   * error message
   * @type {string}
   * @memberof Register422ResponseErrors
   */
  error_message?: string
}
/**
 *
 * @export
 * @interface Stop
 */
export interface Stop {
  /**
   * Setting stop or in use status of user
   * @type {number}
   * @memberof Stop
   */
  is_stop: number
}
/**
 *
 * @export
 * @interface SubAdministrator
 */
export interface SubAdministrator {
  /**
   * request success
   * @type {number}
   * @memberof SubAdministrator
   */
  success: number
  /**
   *
   * @type {SubAdministratorData}
   * @memberof SubAdministrator
   */
  data: SubAdministratorData
  /**
   *
   * @type {string}
   * @memberof SubAdministrator
   */
  errors: string | null
}
/**
 *
 * @export
 * @interface SubAdministratorData
 */
export interface SubAdministratorData {
  /**
   *
   * @type {Array<SubAdministratorDataAdminsInner>}
   * @memberof SubAdministratorData
   */
  admins: Array<SubAdministratorDataAdminsInner>
  /**
   *
   * @type {Pagination}
   * @memberof SubAdministratorData
   */
  pagination: Pagination
}
/**
 *
 * @export
 * @interface SubAdministratorDataAdminsInner
 */
export interface SubAdministratorDataAdminsInner {
  /**
   * Name
   * @type {string}
   * @memberof SubAdministratorDataAdminsInner
   */
  name?: string
  /**
   * Department
   * @type {string}
   * @memberof SubAdministratorDataAdminsInner
   */
  department?: string
}
/**
 *
 * @export
 * @interface UpdateProfile200Response
 */
export interface UpdateProfile200Response {
  /**
   * Edit my profile successfully
   * @type {number}
   * @memberof UpdateProfile200Response
   */
  success: number
  /**
   *
   * @type {Profile}
   * @memberof UpdateProfile200Response
   */
  data: Profile
  /**
   *
   * @type {string}
   * @memberof UpdateProfile200Response
   */
  errors: string | null
}
/**
 *
 * @export
 * @interface UpdateProfile422Response
 */
export interface UpdateProfile422Response {
  /**
   * Edit Profile Failed
   * @type {number}
   * @memberof UpdateProfile422Response
   */
  success: number
  /**
   *
   * @type {string}
   * @memberof UpdateProfile422Response
   */
  data: string
  /**
   *
   * @type {UpdateProfile422ResponseErrors}
   * @memberof UpdateProfile422Response
   */
  errors: UpdateProfile422ResponseErrors
}
/**
 *
 * @export
 * @interface UpdateProfile422ResponseErrors
 */
export interface UpdateProfile422ResponseErrors {
  /**
   * Edit Profile Failed
   * @type {string}
   * @memberof UpdateProfile422ResponseErrors
   */
  error_code?: string
  /**
   * error message
   * @type {string}
   * @memberof UpdateProfile422ResponseErrors
   */
  error_message?: string
}
/**
 *
 * @export
 * @interface UpdateUsers200Response
 */
export interface UpdateUsers200Response {
  /**
   * Update user successfully
   * @type {number}
   * @memberof UpdateUsers200Response
   */
  success: number
  /**
   * Update user successfully
   * @type {string}
   * @memberof UpdateUsers200Response
   */
  data: string
  /**
   *
   * @type {string}
   * @memberof UpdateUsers200Response
   */
  errors?: string | null
}
/**
 * @type UpdateUsersRequest
 * @export
 */
export type UpdateUsersRequest = Stop | User

/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   * Company name
   * @type {string}
   * @memberof User
   */
  company_name: string
  /**
   * Department
   * @type {string}
   * @memberof User
   */
  department: string
  /**
   * Postal Code
   * @type {string}
   * @memberof User
   */
  postal_code: string
  /**
   * prefecture
   * @type {string}
   * @memberof User
   */
  prefecture: string
  /**
   * Address
   * @type {string}
   * @memberof User
   */
  address: string
  /**
   * Building name
   * @type {string}
   * @memberof User
   */
  building_name?: string
  /**
   * Phone number
   * @type {string}
   * @memberof User
   */
  phone_number: string
  /**
   * First name of manager
   * @type {string}
   * @memberof User
   */
  first_name_manager: string
  /**
   * Last name of manager
   * @type {string}
   * @memberof User
   */
  last_name_manager: string
  /**
   * Email address
   * @type {string}
   * @memberof User
   */
  email: string
  /**
   * Name
   * @type {string}
   * @memberof User
   */
  name?: string
  /**
   * Admin code
   * @type {string}
   * @memberof User
   */
  admin_code: string
}

/**
 * AdminLogsApi - axios parameter creator
 * @export
 */
export const AdminLogsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Get admin logs
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexLogAdmin: async (
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admin-logs`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * AdminLogsApi - functional programming interface
 * @export
 */
export const AdminLogsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminLogsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Get admin logs
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async indexLogAdmin(
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexLogAdmin200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.indexLogAdmin(
        page,
        perPage,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    }
  }
}

/**
 * AdminLogsApi - factory interface
 * @export
 */
export const AdminLogsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminLogsApiFp(configuration)
  return {
    /**
     *
     * @summary Get admin logs
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexLogAdmin(
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<IndexLogAdmin200Response> {
      return localVarFp
        .indexLogAdmin(page, perPage, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * AdminLogsApi - object-oriented interface
 * @export
 * @class AdminLogsApi
 * @extends {BaseAPI}
 */
export class AdminLogsApi extends BaseAPI {
  /**
   *
   * @summary Get admin logs
   * @param {number} [page] Page
   * @param {number} [perPage] Number of records in per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminLogsApi
   */
  public indexLogAdmin(page?: number, perPage?: number, options?: AxiosRequestConfig) {
    return AdminLogsApiFp(this.configuration)
      .indexLogAdmin(page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Delete admins
     * @param {DestroyAdminRequest} destroyAdminRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyAdmin: async (
      destroyAdminRequest: DestroyAdminRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'destroyAdminRequest' is not null or undefined
      assertParamExists("destroyAdmin", "destroyAdminRequest", destroyAdminRequest)
      const localVarPath = `/admins`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        destroyAdminRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Get registration admin list
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexAdmin: async (
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/admins`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminsApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Delete admins
     * @param {DestroyAdminRequest} destroyAdminRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroyAdmin(
      destroyAdminRequest: DestroyAdminRequest,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestroyAdmin200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.destroyAdmin(
        destroyAdminRequest,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Get registration admin list
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async indexAdmin(
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexAdmin200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.indexAdmin(page, perPage, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    }
  }
}

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminsApiFp(configuration)
  return {
    /**
     *
     * @summary Delete admins
     * @param {DestroyAdminRequest} destroyAdminRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyAdmin(
      destroyAdminRequest: DestroyAdminRequest,
      options?: any
    ): AxiosPromise<DestroyAdmin200Response> {
      return localVarFp
        .destroyAdmin(destroyAdminRequest, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get registration admin list
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexAdmin(
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<IndexAdmin200Response> {
      return localVarFp
        .indexAdmin(page, perPage, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
  /**
   *
   * @summary Delete admins
   * @param {DestroyAdminRequest} destroyAdminRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminsApi
   */
  public destroyAdmin(destroyAdminRequest: DestroyAdminRequest, options?: AxiosRequestConfig) {
    return AdminsApiFp(this.configuration)
      .destroyAdmin(destroyAdminRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get registration admin list
   * @param {number} [page] Page
   * @param {number} [perPage] Number of records in per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminsApi
   */
  public indexAdmin(page?: number, perPage?: number, options?: AxiosRequestConfig) {
    return AdminsApiFp(this.configuration)
      .indexAdmin(page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Admin Login
     * @param {Login} [login]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login: async (login?: Login, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/login`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any
      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        login,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Admin Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/logout`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Get my profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/refresh`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Admin Register
     * @param {Register} [register]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      register?: Register,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/register`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "POST", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        register,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Edit my profile
     * @param {Me} [me]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfile: async (me?: Me, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth/me`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(me, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Admin Login
     * @param {Login} [login]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async login(
      login?: Login,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.login(login, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Admin Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logout(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Logout200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Get my profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async me(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Me200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.me(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refresh(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Admin Register
     * @param {Register} [register]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      register?: Register,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Register200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(register, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Edit my profile
     * @param {Me} [me]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateProfile(
      me?: Me,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateProfile200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateProfile(me, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    }
  }
}

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AuthApiFp(configuration)
  return {
    /**
     *
     * @summary Admin Login
     * @param {Login} [login]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    login(login?: Login, options?: any): AxiosPromise<Login200Response> {
      return localVarFp.login(login, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Admin Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logout(options?: any): AxiosPromise<Logout200Response> {
      return localVarFp.logout(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Get my profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me(options?: any): AxiosPromise<Me200Response> {
      return localVarFp.me(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Refresh token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh(options?: any): AxiosPromise<Login200Response> {
      return localVarFp.refresh(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Admin Register
     * @param {Register} [register]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(register?: Register, options?: any): AxiosPromise<Register200Response> {
      return localVarFp.register(register, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Edit my profile
     * @param {Me} [me]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateProfile(me?: Me, options?: any): AxiosPromise<UpdateProfile200Response> {
      return localVarFp.updateProfile(me, options).then((request) => request(axios, basePath))
    }
  }
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
  /**
   *
   * @summary Admin Login
   * @param {Login} [login]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public login(login?: Login, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .login(login, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Admin Logout
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public logout(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .logout(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Get my profile
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public me(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .me(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Refresh token
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public refresh(options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .refresh(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Admin Register
   * @param {Register} [register]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public register(register?: Register, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .register(register, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Edit my profile
   * @param {Me} [me]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthApi
   */
  public updateProfile(me?: Me, options?: AxiosRequestConfig) {
    return AuthApiFp(this.configuration)
      .updateProfile(me, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Delete user
     * @param {number} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyUser: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("destroyUser", "userId", userId)
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary List users
     * @param {boolean} [deleted]
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexUser: async (
      deleted?: boolean,
      page?: number,
      perPage?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "GET", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      if (deleted !== undefined) {
        localVarQueryParameter["deleted"] = deleted
      }

      if (page !== undefined) {
        localVarQueryParameter["page"] = page
      }

      if (perPage !== undefined) {
        localVarQueryParameter["per_page"] = perPage
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    },
    /**
     *
     * @summary Update data users
     * @param {number} userId User id
     * @param {UpdateUsersRequest} [updateUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers: async (
      userId: number,
      updateUsersRequest?: UpdateUsersRequest,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("updateUsers", "userId", userId)
      const localVarPath = `/users/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration)

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        updateUsersRequest,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions
      }
    }
  }
}

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Delete user
     * @param {number} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async destroyUser(
      userId: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DestroyUser200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.destroyUser(userId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary List users
     * @param {boolean} [deleted]
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async indexUser(
      deleted?: boolean,
      page?: number,
      perPage?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndexUser200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.indexUser(
        deleted,
        page,
        perPage,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @summary Update data users
     * @param {number} userId User id
     * @param {UpdateUsersRequest} [updateUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUsers(
      userId: number,
      updateUsersRequest?: UpdateUsersRequest,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateUsers200Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUsers(
        userId,
        updateUsersRequest,
        options
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    }
  }
}

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersApiFp(configuration)
  return {
    /**
     *
     * @summary Delete user
     * @param {number} userId User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    destroyUser(userId: number, options?: any): AxiosPromise<DestroyUser200Response> {
      return localVarFp.destroyUser(userId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary List users
     * @param {boolean} [deleted]
     * @param {number} [page] Page
     * @param {number} [perPage] Number of records in per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    indexUser(
      deleted?: boolean,
      page?: number,
      perPage?: number,
      options?: any
    ): AxiosPromise<IndexUser200Response> {
      return localVarFp
        .indexUser(deleted, page, perPage, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Update data users
     * @param {number} userId User id
     * @param {UpdateUsersRequest} [updateUsersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUsers(
      userId: number,
      updateUsersRequest?: UpdateUsersRequest,
      options?: any
    ): AxiosPromise<UpdateUsers200Response> {
      return localVarFp
        .updateUsers(userId, updateUsersRequest, options)
        .then((request) => request(axios, basePath))
    }
  }
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   *
   * @summary Delete user
   * @param {number} userId User id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public destroyUser(userId: number, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .destroyUser(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary List users
   * @param {boolean} [deleted]
   * @param {number} [page] Page
   * @param {number} [perPage] Number of records in per page
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public indexUser(
    deleted?: boolean,
    page?: number,
    perPage?: number,
    options?: AxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .indexUser(deleted, page, perPage, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Update data users
   * @param {number} userId User id
   * @param {UpdateUsersRequest} [updateUsersRequest]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public updateUsers(
    userId: number,
    updateUsersRequest?: UpdateUsersRequest,
    options?: AxiosRequestConfig
  ) {
    return UsersApiFp(this.configuration)
      .updateUsers(userId, updateUsersRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
